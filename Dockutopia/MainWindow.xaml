<Window x:Class="Dockutopia.MainWindow"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
        xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
        xmlns:local="clr-namespace:Dockutopia"
        xmlns:viewModel="clr-namespace:Dockutopia.ViewModel"
        xmlns:converter="clr-namespace:Dockutopia.Converter"
        mc:Ignorable="d"
        Title="Dockutopia" Width="900" Height="700" Loaded="Window_Loaded" ResizeMode="CanResizeWithGrip" Icon="Dockutopia.ico">
    <Window.DataContext>
        <viewModel:MainViewModel />
    </Window.DataContext>
    <Window.InputBindings>
        <KeyBinding Key="F1" Command="{Binding RunDockerCommandWithRefreshCommand}" CommandParameter="help" />
        <KeyBinding Key="F5" Command="{Binding RefreshUiCommand}" />
        <KeyBinding Key="Escape" Command="{Binding RunDockerKillCommand}" />
        <KeyBinding Modifiers="Control" Key="c" Command="{Binding RunDockerKillCommand}" />
        <!--<KeyBinding Key="Escape"></KeyBinding>-->
    </Window.InputBindings>
    <Window.Resources>
        <converter:StartCommandParamConverter x:Key="startCommandParamConverter" />
        <converter:StopCommandParamConverter x:Key="stopCommandParamConverter" />
        <converter:RemoveCommandParamConverter x:Key="removeCommandParamConverter" />
        <converter:ContainerAttachCommandParamConverter x:Key="containerAttachCommandParamConverter" />
        <converter:ContainerPauseCommandParamConverter x:Key="containerPauseCommandParamConverter" />
        <converter:ContainerUnpauseCommandParamConverter x:Key="containerUnpauseCommandParamConverter" />
        <converter:ContainerPortCommandParamConverter x:Key="containerPortCommandParamConverter" />
        <converter:IpCommandParamConverter x:Key="ipCommandParamConverter" />
        <converter:InspectCommandParamConverter x:Key="inspectCommandParamConverter" />
        <converter:ImageInspectCommandParamConverter x:Key="imageInspectCommandParamConverter" />
        <converter:ImageHistoryCommandParamConverter x:Key="imageHistoryCommandParamConverter" />
        <converter:StringToBoolConverter x:Key="stringToBoolConverter" />
        <converter:IsEnabledToHiddenConverter x:Key="isEnabledToHiddenConverter" />
        <Storyboard x:Key="StoryboardSpinner" RepeatBehavior="Forever">
            <DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="RectangleSpinner" Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[2].(RotateTransform.Angle)">
                <SplineDoubleKeyFrame KeyTime="00:00:03" Value="360"/>
            </DoubleAnimationUsingKeyFrames>
            <DoubleAnimation Storyboard.TargetProperty="Opacity" From="0" To="1" Duration="0:0:1"  AutoReverse="True" Storyboard.TargetName="OverLay"/>
        </Storyboard>       
    </Window.Resources>
    <Window.Triggers>
        <EventTrigger RoutedEvent="FrameworkElement.Loaded">
            <BeginStoryboard Storyboard="{StaticResource StoryboardSpinner}"/>
        </EventTrigger>
    </Window.Triggers>

    <Grid>
        <Grid.RowDefinitions>
            <RowDefinition Height="30" />
            <RowDefinition Height="Auto" />
            <RowDefinition Height="10" />
            <RowDefinition Height="*" />
        </Grid.RowDefinitions>

        <!--#region ImageRunPopup -->
        <Popup x:Name="ImageRunPopup"  PlacementTarget="{Binding ElementName=listBoxImages}" Placement="Center" Width="300" Margin="0,20,0,0" IsOpen="{Binding RunImageIdPopUp, Converter={StaticResource stringToBoolConverter}}" StaysOpen="False">
            <Border BorderBrush="cadetblue" BorderThickness="1" Background="#333333">
                <Grid>
                    <Grid.ColumnDefinitions>
                        <ColumnDefinition Width="Auto"/>
                        <ColumnDefinition Width="*"/>
                    </Grid.ColumnDefinitions>
                    <Grid.RowDefinitions>
                        <RowDefinition Height="Auto" />
                        <RowDefinition Height="Auto" />
                        <RowDefinition Height="Auto" />
                        <RowDefinition Height="Auto" />
                        <RowDefinition Height="Auto" />
                        <RowDefinition Height="Auto" />
                        <RowDefinition Height="Auto" />
                        <RowDefinition Height="Auto" />
                    </Grid.RowDefinitions>
       
                    <TextBlock Grid.Row="0" Grid.Column="0" Foreground="WhiteSmoke" VerticalAlignment="Center" Margin="5,10,5,5" Text="Image"/>
                    <TextBlock Grid.Row="0" Grid.Column="1" x:Name="popUpImageId" Foreground="WhiteSmoke" Margin="5,10,5,5" Text="{Binding RunImageIdPopUp}"/>
                    <TextBlock Grid.Row="1" Grid.Column="0" Foreground="WhiteSmoke" VerticalAlignment="Center" Margin="5,0,5,0" Text="Name"/>
                    <TextBox Grid.Row="1" Grid.Column="1" x:Name="popUpContainerName" Margin="5" Padding="2" Text="{Binding ImageArgs.Name}"></TextBox>
                    <TextBlock Grid.Row="2" Grid.Column="0" Foreground="WhiteSmoke" VerticalAlignment="Center" Margin="5,0,5,0" Text="IP"/>
                    <TextBox Grid.Row="2" Grid.Column="1" x:Name="popUpIp" Margin="5" Padding="2" Text="{Binding ImageArgs.Ip}"></TextBox>
                    <TextBlock Grid.Row="3" Grid.Column="0" Foreground="WhiteSmoke" VerticalAlignment="Center" Margin="5,0,5,0" Text="Port out"/>
                    <TextBox Grid.Row="3" Grid.Column="1" x:Name="popUpContainerPort" Margin="5" Padding="2" Text="{Binding ImageArgs.ContainerPort}"></TextBox>
                    <TextBlock Grid.Row="4" Grid.Column="0" Foreground="WhiteSmoke" VerticalAlignment="Center" Margin="5,0,5,0" Text="Port in"/>
                    <TextBox Grid.Row="4" Grid.Column="1" x:Name="popUpHostPort" Margin="5" Padding="2" Text="{Binding ImageArgs.HostPort}"></TextBox>
                    <CheckBox Grid.Row="5" Grid.Column="1" x:Name="popUpIsolated" Margin="5" IsChecked="{Binding ImageArgs.RunIsolated}">run isolated</CheckBox>
                    <TextBlock Grid.Row="6" Grid.Column="0" Foreground="WhiteSmoke" VerticalAlignment="Center" Margin="5,0,5,0" Text="Other"/>
                    <TextBox Grid.Row="6" Grid.Column="1" x:Name="popUpExtraInput" Margin="5" Padding="2" Text="{Binding ImageArgs.ExtraInput}"></TextBox>

                    <Button Grid.Row="7" Grid.Column="1" Margin="5" Command="{Binding ImageRunCommand}">Run</Button>
                </Grid>
            </Border>
        </Popup>
        <!--#endregion -->

        <!--#region ToolbarMenu -->
        <Menu Grid.Row="0">
            <MenuItem Header="_File">
                <MenuItem Header="_Refresh (F5)" MinWidth="100" Command="{Binding RefreshUiCommand}">
                    <MenuItem.Icon>
                        <TextBlock Text="&#xf021;" FontFamily="{StaticResource FontAwesome}"/>
                    </MenuItem.Icon>
                </MenuItem>
                <MenuItem Header="_Close" MinWidth="100" Click="MenuItemClose_Click">
                    <MenuItem.Icon>
                        <TextBlock Text="&#xf00d;" FontFamily="{StaticResource FontAwesome}"/>
                    </MenuItem.Icon>
                </MenuItem>
            </MenuItem>
            <MenuItem Header="_Commands">
                <MenuItem Header="_info" Command="{Binding RunDockerCommandWithRefreshCommand}" CommandParameter="info" MinWidth="100">
                    <MenuItem.Icon>
                        <TextBlock Text="&#xf129;" FontFamily="{StaticResource FontAwesome}"/>
                    </MenuItem.Icon>
                </MenuItem>
                <MenuItem Header="_version" Command="{Binding RunDockerCommandWithRefreshCommand}" CommandParameter="version" MinWidth="100">
                    <MenuItem.Icon>
                        <TextBlock Text="&#xf24d;" FontFamily="{StaticResource FontAwesome}"/>
                    </MenuItem.Icon>
                </MenuItem>
                <MenuItem Header="_help" Command="{Binding RunDockerCommandWithRefreshCommand}" CommandParameter="help" MinWidth="100">
                    <MenuItem.Icon>
                        <TextBlock Text="&#xf128;" FontFamily="{StaticResource FontAwesome}"/>
                    </MenuItem.Icon>
                </MenuItem>
                <MenuItem Header="_stats" Command="{Binding RunDockerCommandWithRefreshCommand}" CommandParameter="stats" MinWidth="100">
                    <MenuItem.Icon>
                        <TextBlock Text="&#xf080;" FontFamily="{StaticResource FontAwesome}"/>
                    </MenuItem.Icon>
                </MenuItem>
            </MenuItem>
        </Menu>

        <!--#endregion -->

        <StackPanel Grid.Row="1" Background="#333333">
            <Label Margin="6,2,6,2" Content="Images" />

            <ListView x:Name="listBoxImages"  ItemsSource="{Binding DockerImagesListHandler.DockerEntities}" SelectedItem="{Binding DockerImagesListHandler.SelectedDockerEntity}" Margin="0,0,0,0">
                <ListView.View>
                    <GridView>
                        <GridViewColumn Header="Repository" DisplayMemberBinding="{Binding Repository}" />
                        <GridViewColumn Header="Tag" DisplayMemberBinding="{Binding Tag}" />
                        <GridViewColumn Header="Image ID" DisplayMemberBinding="{Binding ImageId}" />
                        <GridViewColumn Header="Size" DisplayMemberBinding="{Binding Size}" />
                        <GridViewColumn Header="Created" DisplayMemberBinding="{Binding Created}" />
                    </GridView>
                </ListView.View>
                <ListView.ContextMenu>
                    <ContextMenu x:Name="ImagesContextMenu" MinWidth="100">

                        <MenuItem Header="Inspect" Command="{Binding RunDockerCommandWithRefreshCommand}" CommandParameter="{Binding DockerImagesListHandler.SelectedDockerEntity.ID, Converter={StaticResource imageInspectCommandParamConverter}}"/>
                        <MenuItem Header="History" Command="{Binding RunDockerCommandWithRefreshCommand}" CommandParameter="{Binding DockerImagesListHandler.SelectedDockerEntity.ID, Converter={StaticResource imageHistoryCommandParamConverter}}"/>

                        <Separator />
                        <MenuItem Header="Run..." Command="{Binding ImagePopupCommand}" CommandParameter="{Binding DockerImagesListHandler.SelectedDockerEntity.ID}"/>
                    </ContextMenu>
                </ListView.ContextMenu>
            </ListView>


            <Label Margin="6,4,6,2" Content="Containers"/>
            <ListView x:Name="listBoxContainers" ItemsSource="{Binding DockerContainerListHandler.DockerEntities}" SelectedItem="{Binding DockerContainerListHandler.SelectedDockerEntity}" Margin="0,0,0,10">
                <ListView.View>
                    <GridView>
                        <GridViewColumn Header="ContainerId" DisplayMemberBinding="{Binding ContainerId}" />
                        <GridViewColumn Header="Image" DisplayMemberBinding="{Binding Image}" />
                        <GridViewColumn Header="Command" DisplayMemberBinding="{Binding Command}" />
                        <GridViewColumn Header="Running for" DisplayMemberBinding="{Binding RunningFor}" />
                        <GridViewColumn Header="Status" DisplayMemberBinding="{Binding Status}" />
                        <GridViewColumn Header="Ports" DisplayMemberBinding="{Binding Ports}" />
                        <GridViewColumn Header="Names" DisplayMemberBinding="{Binding Names}" />
                    </GridView>
                </ListView.View>
                <ListView.ContextMenu>
                    <ContextMenu x:Name="ContainersContextMenu" MinWidth="100">
                        <MenuItem Header="Start" Command="{Binding RunDockerCommandWithRefreshCommand}" CommandParameter="{Binding DockerContainerListHandler.SelectedDockerEntity.Name, Converter={StaticResource startCommandParamConverter}}"/>
                        <MenuItem Header="Stop" Command="{Binding RunDockerCommandWithRefreshCommand}" CommandParameter="{Binding DockerContainerListHandler.SelectedDockerEntity.Name, Converter={StaticResource stopCommandParamConverter}}"/>
                        <MenuItem Header="Port" Command="{Binding RunDockerCommandWithRefreshCommand}" CommandParameter="{Binding DockerContainerListHandler.SelectedDockerEntity.ID, Converter={StaticResource containerPortCommandParamConverter}}"/>
                        <Separator />
                        <MenuItem Header="Inspect">
                            <MenuItem Header="All" Command="{Binding RunDockerCommandWithRefreshCommand}" CommandParameter="{Binding DockerContainerListHandler.SelectedDockerEntity.ID, Converter={StaticResource inspectCommandParamConverter}}"/>
                            <MenuItem Header="IP" Command="{Binding RunDockerCommandWithRefreshCommand}" CommandParameter="{Binding DockerContainerListHandler.SelectedDockerEntity.ID, Converter={StaticResource ipCommandParamConverter}}"/>
                         </MenuItem>
                        <Separator />
                        <MenuItem Header="Attach" Command="{Binding RunDockerCommandWithRefreshCommand}" CommandParameter="{Binding DockerContainerListHandler.SelectedDockerEntity.ID, Converter={StaticResource containerAttachCommandParamConverter}}"/>
                        <MenuItem Header="Remove" Command="{Binding RunDockerCommandWithRefreshCommand}" CommandParameter="{Binding DockerContainerListHandler.SelectedDockerEntity.ID, Converter={StaticResource removeCommandParamConverter}}"/>
                        <Separator />
                        <MenuItem Header="Other">
                            <MenuItem Header="Pause" Command="{Binding RunDockerCommandWithRefreshCommand}" CommandParameter="{Binding DockerContainerListHandler.SelectedDockerEntity.ID, Converter={StaticResource containerPauseCommandParamConverter}}"/>
                            <MenuItem Header="Unpause" Command="{Binding RunDockerCommandWithRefreshCommand}" CommandParameter="{Binding DockerContainerListHandler.SelectedDockerEntity.ID, Converter={StaticResource containerUnpauseCommandParamConverter}}"/>
                        </MenuItem>
                    </ContextMenu>
                    
                </ListView.ContextMenu>
            </ListView>
        </StackPanel>


         <!-- grid splitter -->
        <GridSplitter Grid.Row="2" Height="10" HorizontalAlignment="Stretch" Background="#FF434343"/>

        <!-- bottom grid -->
        <Grid Grid.Row="3" Margin="0,0,0,0">
            <Grid.RowDefinitions>
                <RowDefinition Height="*" />
                <RowDefinition Height="Auto" />
            </Grid.RowDefinitions>

            <ScrollViewer Background="#333333" Grid.Row="0" x:Name="scrollViewerOutput"  MinHeight="300"  VerticalScrollBarVisibility="Visible" HorizontalScrollBarVisibility="Disabled">
                <ItemsControl x:Name="itemsControlOutput" Margin="5" MinHeight="250" ItemsSource="{Binding Path=DockerHandler.OutputDockerResponses, Mode=OneWay}">
                    <ItemsControl.ItemTemplate>
                    <DataTemplate >
                            <TextBlock Text="{Binding Message}" Foreground="{Binding Color}"/>
                        </DataTemplate>
                    </ItemsControl.ItemTemplate>
                </ItemsControl>
            </ScrollViewer>


            <TextBox Grid.Row="1" x:Name="textBoxCommand" HorizontalAlignment="Stretch" Height="23" TextWrapping="Wrap" Text="{Binding PreviousCommandHandler.CommandText}" VerticalAlignment="Top" KeyUp="textBoxCommand_KeyUp">
                <TextBox.InputBindings>
                    <KeyBinding Key="Enter" Command="{Binding OnEnterPressCommand}" CommandParameter="{Binding Text, ElementName=textBoxCommand}"/>
                    <KeyBinding Key="Up" Command="{Binding PreviousCommandHandler.GetPreviousInputCommand}" />
                    <KeyBinding Key="Down" Command="{Binding PreviousCommandHandler.GetNextInputCommand}" />
                </TextBox.InputBindings>
            </TextBox>

            <!--#region Spinner -->
            <Border Grid.Row="1" x:Name="OverLay" Background="Black" BorderThickness="0" Visibility="{Binding DockerHandler.IsEnabled, Converter={StaticResource isEnabledToHiddenConverter}}" Opacity="0">
                <Rectangle x:Name="RectangleSpinner" VerticalAlignment="Center" HorizontalAlignment="Right" Width="10" Height="10" Margin="3,3,30,3" RenderTransformOrigin="0.5,0.5">
                    <Rectangle.RenderTransform>
                        <TransformGroup>
                            <ScaleTransform/>
                            <SkewTransform/>
                            <RotateTransform/>
                        </TransformGroup>
                    </Rectangle.RenderTransform>
                    <Rectangle.Fill>
                        <SolidColorBrush Color="CadetBlue" />
                    </Rectangle.Fill>
                </Rectangle>
            </Border>
            <!--#endregion -->

        </Grid>

    </Grid>

</Window>
